/* * ATM Example system - file Transaction.java    * * copyright (c) 2001 - Russell C. Bjork * */ package edu.gordon.atm.transaction;import edu.gordon.atm.physical.CustomerConsole;import edu.gordon.banking.Balances;import edu.gordon.banking.Card;import edu.gordon.banking.Message;import edu.gordon.banking.Receipt;import edu.gordon.banking.Status;/** Abstract base class for classes representing the various kinds of *  transaction the ATM can perform */public abstract class Transaction{    /** Constructor     *     *  @param edu.gordon.atm the ATM used to communicate with customer     *  @param session the session in which this transaction is being performed     *  @param card the customer's card     *  @param pin the PIN entered by the customer     */         protected Transaction(Card card, int pin)    {        this.card = card;        this.pin = pin;        this.serialNumber = nextSerialNumber ++;        this.balances = new Balances();                state = GETTING_SPECIFICS_STATE;    }                             public Card GetCard(){    	return this.card;    }    /** Get serial number of this transaction     *     *  @return serial number     */    public int getSerialNumber()    {        return serialNumber;    }        /** Get specifics for the transaction from the customer - each     *  subclass must implement this appropriately.     *     *  @return message to bank for initiating this transaction     *  @exception CustomerConsole.Cancelled if customer cancelled this transaction     */    public abstract Message getSpecificsFromCustomer(CustomerConsole console) throws CustomerConsole.Cancelled;        /** Complete an approved transaction  - each subclass must implement     *  this appropriately.     *     *  @return receipt to be printed for this transaction     *  @exception CustomerConsole.Cancelled if customer cancelled this transaction     */    public abstract void completeTransaction(Receipt c_receipt) throws CustomerConsole.Cancelled;            // Local class representing card retained exception           /** Exception that is thrown when the customer's card is retained due to too     *  many invalid PIN entries     */    public static class CardRetained extends Exception    {        /** Constructor         */        public CardRetained()        {            super("Card retained due to too many invalid PINs");        }    }            // Instance variables    /** Customer card for the session this transaction is part of     */    public Card card;        /** PIN entered or re-entered by customer     */    public int pin;        /** Serial number of this transaction     */    public int serialNumber;        /** Message to bank describing this transaction     */    public Message message;        /** Used to return account balances from the bank     */    public Balances balances;        /** List of available transaction types to display as a menu     */    public static final String [] TRANSACTION_TYPES_MENU =         { "Withdrawal", "Deposit", "Transfer", "Balance Inquiry" };            /** Next serial number - used to assign a unique serial number to     *  each transaction     */    private static int nextSerialNumber = 1;        /** The current state of the transaction     */    private int state;        // Possible values for state        /** Getting specifics of the transaction from customer     */    public static final int GETTING_SPECIFICS_STATE = 1;        /** Sending transaction to bank     */    public static final int SENDING_TO_BANK_STATE = 2;        /** Performing invalid PIN extension     */    public static final int INVALID_PIN_STATE = 3;        /** Completing transaction     */    public static final int COMPLETING_TRANSACTION_STATE = 4;        /** Printing receipt     */    public static final int PRINTING_RECEIPT_STATE = 5;        /** Asking if customer wants to do another transaction     */    public static final int ASKING_DO_ANOTHER_STATE = 6;}